#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

LIBDIR='@libdir@'
SYSCONFDIR='@sysconfdir@'
DATADIR='@datadir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh

release_pkg(){
    local tree="$1" pkg="$2" src_repo="$3" dest_repo="$4"
    if [[ -d ${tree_dir_artix}/$tree/$pkg ]];then
        cd ${tree_dir_artix}/$tree/$pkg
        source trunk/PKGBUILD
        [[ $arch == 'any' ]] && CARCH=any
        if [[ ${src_repo} != 'trunk' ]];then
            cd repos
            local dest=${dest_repo}-$CARCH action='move'
            [[ -d $dest ]] && git rm -r $dest
            git mv ${src_repo}-$CARCH $dest
            cd ..
        else
            local dest=${dest_repo}-$CARCH action='release'
            [[ ! -d repos ]] && mkdir repos
            cp -r trunk repos/$dest
        fi
        git add .
        git commit -m " [${src_repo}] -> [${dest_repo}] '$pkg' ${action}"
        ${push} && git push origin master
    fi
}

commit_pkg(){
    local tree="$1" pkg="$2" dest_repo="$3"
    cd ${tree_dir_artix}/$tree/$pkg
    git add .
    git commit -m "Update '$pkg' [${dest_repo}]"
    ${push} && git push origin master
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "git_tree: %s" "${git_tree}"
    msg2 "source_repo: %s" "${source_repo}"
    msg2 "target_repo: %s" "${target_repo}"
    msg2 "package: %s" "${package}"

    msg "ARGS:"
    msg2 "release: %s" "${release}"
    msg2 "commit: %s" "${commit}"
    msg2 "push: %s" "${push}"
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${PAC_USERCONFDIR}/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

source_repo='trunk'
package=''
release=false
commit=false
push=false
pretend=false
git_tree='packages'

cmd=${0##*/}
target_repo=${cmd%pkg}

case ${target_repo} in
    community*|multilib*) git_tree='packages-galaxy' ;;
esac

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -s                 Source repository [default:${source_repo}]"
    echo '    -p                 Package name'
    echo '    -r                 Release a package'
    echo '    -c                 Commit a package'
    echo '    -u                 Push'
    echo '    -q                 Query settings and pretend'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='p:s:rucqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        s) source_repo="$OPTARG" ;;
        p) package="$OPTARG" ;;
        c) commit=true ;;
        u) push=true ;;
        r) release=true ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

${pretend} && display_settings && exit 1

${commit} && commit_pkg "${git_tree}" "${package}" "${target_repo}"

${release} && release_pkg "${git_tree}" "${package}" "${source_repo}" "${target_repo}"
