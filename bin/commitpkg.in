#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

LIBDIR='@libdir@'
SYSCONFDIR='@sysconfdir@'
DATADIR='@datadir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh

commit_pkg(){
    cd ${tree_dir_artix}/${git_tree}/${package}
    info "[%s] -> [%s] '%s' %s" "${source_repo}" "${target_repo}" "${package}" "${action}"
    git add .
    git commit -m "[${source_repo}] -> [${target_repo}] '${package}' ${action}"
    ${push} && git push origin master
}

release_pkg(){
    if [[ -d ${tree_dir_artix}/${git_tree}/${package} ]];then
        cd ${tree_dir_artix}/${git_tree}/${package}
        source trunk/PKGBUILD
        [[ $arch == 'any' ]] && CARCH=any
        if [[ ${source_repo} != 'trunk' ]];then
            cd repos
            dest=${target_repo}-$CARCH
            action='move'
            [[ -d $dest ]] && git rm -r $dest
            git mv ${source_repo}-$CARCH $dest
            cd ..
        else
            dest=${target_repo}-$CARCH
            action='release'
            [[ -d $dest ]] && git rm -r repos/$dest
            [[ ! -d repos ]] && mkdir repos
            cp -r trunk repos/$dest
        fi
        commit_pkg
    fi
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "git_tree: %s" "${git_tree}"
    msg2 "source_repo: %s" "${source_repo}"
    msg2 "target_repo: %s" "${target_repo}"
    msg2 "package: %s" "${package}"

    msg "ARGS:"
    msg2 "push: %s" "${push}"
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${PAC_USERCONFDIR}/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

source_repo='trunk'
package=''
push=false
pretend=false

git_tree='packages'

cmd=${0##*/}
target_repo=${cmd%pkg}

case ${target_repo} in
    community*|multilib*) git_tree='packages-galaxy' ;;
esac

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -s <name>          Source repository [default:${source_repo}]"
    echo '    -p <pkg>           Package name'
    echo '    -u                 Push'
    echo '    -q                 Query settings and pretend'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='p:s:uqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        s) source_repo="$OPTARG" ;;
        p) package="$OPTARG" ;;
        u) push=true ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

${pretend} && display_settings && exit 1

release_pkg
