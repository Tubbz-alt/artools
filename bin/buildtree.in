#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

LIBDIR='@libdir@'
SYSCONFDIR='@sysconfdir@'
DATADIR='@datadir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh
import ${LIBDIR}/util-pkg.sh

clone_tree(){
    local timer=$(get_timer) tree="$1" host_tree="$2"
    msg "Preparing [%s] ..." "$tree"
    info "clone"
    git clone $host_tree.git
    msg "Done [%s]" "$tree"
    show_elapsed_time "${FUNCNAME}" "${timer}"
}

pull_tree_arch(){
    cd ${tree_dir_arch}
    for tree in packages community;do
        if [[ -d ${tree} ]];then
            cd ${tree}
                pull_tree "${tree}"
            cd ..
        else
            clone_tree "${tree}" "${host_tree_arch}/${tree}"
        fi
    done
}

pull_tree_artix(){
    cd ${tree_dir_artix}
    for tree in packages packages-galaxy;do
        if [[ -d ${tree} ]];then
            cd ${tree}
                git config --bool pull.rebase true
                pull_tree "${tree}"
            cd ..
        else
            clone_tree "${tree}" "${host_tree_artix}/${tree}"
        fi
    done
}

show_version_table(){
    msg_table_header "%-20s %-20s %-25s %-30s %-30s" "Arch Repo" "Artix Repo" "Package" "Arch version" "Artix version"
    for tree in packages packages-galaxy;do
        local git=$(find ${tree_dir_artix}/$tree/ -mindepth 1 -maxdepth 1 -type d)
        for pkg_path in ${git[@]}; do
            local artixrepo=$(find_repo "$pkg_path")
            if [[ -d $pkg_path/repos/$artixrepo ]];then
                source $pkg_path/trunk/PKGBUILD 2>/dev/null
                local pkg=${pkg_path##*/}
                local artixver=$(get_full_version $pkg)
                local src=$(get_import_path "$tree" "$pkg")
                local archrepo=$(find_repo "$src/$pkg")
                if [[ -d $src/$pkg/repos/$archrepo ]];then
                    source $src/$pkg/trunk/PKGBUILD 2>/dev/null
                    local archver=$(get_full_version $pkg)
                fi
                if [ $(vercmp $artixver $archver) -lt 0 ];then
                    local ar=$(arch_to_artix_repo "$artixrepo")
                    ${upgrades} && msg_row_upgrade "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                fi
                if [ $(vercmp $artixver $archver) -gt 0 ];then
                    local ar=$(arch_to_artix_repo "$artixrepo")
                    if [[ -n $archver ]] && [[ -n $archrepo ]];then
                        ${downgrades} && msg_row_downgrade "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                    fi
                fi
                unset pkgver epoch pkgrel artixver archver _package
            fi
        done
    done
}

show_artix_table(){
     msg_table_header "%-20s %-20s %-25s %-30s %-30s" "Arch Repo" "Artix Repo" "Package" "Arch version" "Artix version"
    for tree in packages packages-galaxy;do
        local git=$(find ${tree_dir_artix}/$tree/ -mindepth 1 -maxdepth 1 -type d)
        for pkg_path in ${git[@]}; do
            local artixrepo=$(find_repo "$pkg_path")
            if [[ -d $pkg_path/repos/$artixrepo ]];then
                source $pkg_path/repos/$artixrepo/PKGBUILD 2>/dev/null
                local pkg=${pkg_path##*/}
                local artixver=$(get_full_version $pkg)
                local src=$(get_import_path "$tree" "$pkg")
                local archrepo=$(find_repo "$src/$pkg")
                if [[ -d $src/$pkg/repos/$archrepo ]];then
                    source $src/$pkg/repos/$archrepo/PKGBUILD 2>/dev/null
                    local archver=$(get_full_version $pkg)
                fi
                if [ $(vercmp $artixver $archver) -eq 0 ] || [ $(vercmp $artixver $archver) -gt 0 ];then

                    local ar=$(arch_to_artix_repo "$artixrepo")
                    case $ar in
                        *goblins)
                            if [[ $archrepo == $artixrepo ]];then
                                msg_row "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                            else
                                msg_row_notify "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                            fi
                        ;;
                        *gremlins)
                            if [[ $archrepo == $artixrepo ]];then
                                msg_row "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                            else
                                msg_row_notify "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver"
                            fi
                        ;;
#                         system|world|galaxy|lib32) msg_row "%-20s %-20s %-25s %-30s %-30s" "${archrepo%-*}" "${ar}" "$pkg" "$archver" "$artixver" ;;
                    esac
                fi
                unset pkgver epoch pkgrel artixver archver _package
            fi
        done
    done
}

from_arch(){
    local pkg="$1" archtree="$2" artixtree="$3" src= dest=
    src=${tree_dir_arch}/$archtree/$pkg/trunk
    dest=${tree_dir_artix}/$artixtree/$pkg/trunk

    source $src/PKGBUILD 2>/dev/null
    cd ${tree_dir_arch}/$archtree
    msg "Package: %s" "$pkg"
    local archver=$(get_full_version $pkg)
    msg2 "Arch Version: %s" "$archver"

    if [[ -d $dest ]];then
        source $dest/PKGBUILD 2>/dev/null
        cd ${tree_dir_artix}/$artixtree
        local artixver=$(get_full_version $pkg)
        msg2 "Artix Version: %s" "$artixver"
        if [ $(vercmp $artixver $archver) -lt 0 ];then
            info "Importing from archlinux (%s)" "$archtree"
            rsync "${rsync_args[@]}" $src/ $dest/
            patch_pkg "$pkg" "$tree"
        else
            warning "Versions match! Nothing to do!"
        fi
    else
        cd ${tree_dir_artix}/$artixtree
        info "Importing from archlinux (%s)" "$archtree"
        mkdir $pkg
        rsync "${rsync_args[@]}" $src/ $dest/
        patch_pkg "$pkg" "$tree"
    fi
}

sync_repos(){
    pull_tree_arch
    pull_tree_artix
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "package: %s" "${package}"

    msg "ARGS:"
    msg2 "sync: %s" "${sync}"
    msg2 "compare: %s" "${compare}"
    msg2 "upgrades: %s" "${upgrades}"
    msg2 "downgrades: %s" "${downgrades}"
    msg2 "artix: %s" "${artix}"
    msg2 "import_packages: %s" "${import_packages}"
    msg2 "import_community: %s" "${import_community}"

    msg "PATHS:"
    msg2 "tree_dir_artix: %s" "${tree_dir_artix}"
    msg2 "tree_dir_arch: %s" "${tree_dir_arch}"
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${PAC_USERCONFDIR}/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

pretend=false
sync=false
compare=false
upgrades=true
downgrades=false
artix=false
import_packages=false
import_community=false
package=''

git_artix='packages'
git_arch='packages'

rsync_args=(-aWxvci --progress --delete-before --no-R --no-implied-dirs)

usage() {
    echo "Usage: ${0##*/} [options]"
    echo '    -p <pkg>      Package name'
    echo "    -s            Clone or pull repos"
    echo '    -c            Compare packages'
    echo '    -u            Show upgrade packages'
    echo '    -d            Show downgrade packages'
    echo '    -a            Show artix specific packages'
    echo '    -i            Import from arch packages'
    echo '    -j            Import from arch community'
    echo '    -q            Query settings'
    echo '    -h            This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='p:csudaijqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        p) package="$OPTARG" ;;
        s) sync=true ;;
        c) compare=true ;;
        u) upgrades=false ;;
        d) downgrades=true ;;
        a) artix=true ;;
        i) import_packages=true ;;
        j) import_community=true; git_artix='packages-galaxy'; git_arch='community' ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

prepare_dir "${tree_dir_artix}"
prepare_dir "${tree_dir_arch}"

${pretend} && display_settings && exit 1

${sync} && sync_repos

${compare} && show_version_table

${artix} && show_artix_table

${import_packages} && from_arch "${package}" "${git_arch}" "${git_artix}"

${import_community} && from_arch "${package}" "${git_arch}" "${git_artix}"
