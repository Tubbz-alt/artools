#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

LIBDIR='@libdir@'
SYSCONFDIR='@sysconfdir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh
import ${LIBDIR}/util-pkg.sh

del_from_repo(){
    local ver
    local repo="$1"
    local repo_path=${repos_root}/$repo/os/${target_arch}
    source PKGBUILD
    for name in ${pkgname[@]};do
        [[ $arch == any ]] && CARCH=any
        ver=$(get_full_version $name)
        if pkgfile=$(find_cached_package "$name" "$ver" "$CARCH");then
            info "pkgfile: %s" "${pkgfile##*/}"
            repo-remove -R $repo_path/$repo.db.tar.xz $name
            rm -v $repo_path/${pkgfile##*/}{,.sig}
        fi
    done
}

move_to_repo(){
    local src_repo="$1" dest_repo="$2" pkg="$3" pkgfile=
    local ver 
    local repo_path=
    source PKGBUILD
    for name in ${pkgname[@]};do
        [[ $arch == any ]] && CARCH=any
        ver=$(get_full_version $name)
        if pkgfile=$(find_cached_package "$name" "$ver" "$CARCH"); then
            info "Adding %s to [%s]" "${pkgfile##*/}" "$src_repo"
            repo_path=${repos_root}/$dest_repo/os/${target_arch}
            ln -sf ${pkgfile}{,.sig} $repo_path/
            repo-add -R $repo_path/$dest_repo.db.tar.xz $repo_path/${pkgfile##*/}
            info "Removing %s from [%s]" "${pkgfile##*/}" "$dest_repo"
            repo_path=${repos_root}/$src_repo/os/${target_arch}
            repo-remove -R $repo_path/$src_repo.db.tar.xz $name
            rm -v $repo_path/${pkgfile##*/}{,.sig}
        fi
    done
}

add_to_repo(){
    local ver pkgfile=
    local repo="$1"
    local repo_path=${repos_root}/$repo/os/${target_arch}
    source PKGBUILD
    for name in ${pkgname[@]};do
        [[ $arch == any ]] && CARCH=any
        ver=$(get_full_version $name)
        if pkgfile=$(find_cached_package "$name" "$ver" "$CARCH"); then
            info "pkgfile: %s" "${pkgfile##*/}"
            [[ -e ${pkgfile}.sig ]] && rm ${pkgfile}.sig
            signfile ${pkgfile}
            ln -sf ${pkgfile}{,.sig} $repo_path/
            repo-add -R $repo_path/$repo.db.tar.xz $pkgfile
        fi
    done
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "src_repository: %s" "${src_repository}"
    msg2 "dest_repository: %s" "${dest_repository}"

    msg "ARGS:"
    msg2 "add_pkg: %s" "${add_pkg}"
    msg2 "del_pkg: %s" "${del_pkg}"
    msg2 "move_pkg: %s" "${move_pkg}"
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"
load_vars "${PAC_USERCONFDIR}/makepkg.conf" || load_vars "$USER_HOME/.makepkg.conf"
load_vars /etc/makepkg.conf

pretend=false
add_pkg=false
del_pkg=false
move_pkg=false
src_repository=
dest_repository=

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -s                 Source repository [default:${src_repository}]"
    echo "    -d                 Destination repository [default:${dest_repository}]"
    echo '    -a                 Add package to destination repository'
    echo '    -r                 Remove package from destination repository'
    echo '    -m                 Move packages from source to destination repository'
    echo '    -q                 Query settings and pretend upload'
    echo '    -h                 This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='s:d:armqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        s) src_repository="$OPTARG" ;;
        d) dest_repository="$OPTARG" ;;
        m) move_pkg=true ;;
        a) add_pkg=true ;;
        r) del_pkg=true ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

timer_start=$(get_timer)

prepare_dir "${repos_root}"

${pretend} && display_settings && exit 1

${move_pkg} && move_to_repo "${src_repository}" "${dest_repository}"

${del_pkg} && del_from_repo "${dest_repository}"

${add_pkg} && add_to_repo "${dest_repository}"

exit 0
