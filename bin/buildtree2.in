#!/bin/bash
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

version=@version@

LIBDIR='@libdir@'
SYSCONFDIR='@sysconfdir@'
DATADIR='@datadir@'

[[ -r ${LIBDIR}/util-msg.sh ]] && source ${LIBDIR}/util-msg.sh
import ${LIBDIR}/util.sh
import ${LIBDIR}/util-pkg.sh

get_local_head(){
    echo $(git log --pretty=%H ...refs/heads/$1^ | head -n 1)
}

get_remote_head(){
    echo $(git ls-remote origin -h refs/heads/$1 | cut -f1)
}

is_dirty() {
    [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]] || return 1
    return 0
}

pull_tree(){
    local branch="master" tree="$1" git_opt="$2"
    local local_head=$(get_local_head "$branch")
    local remote_head=$(get_remote_head "$branch")
    local timer=$(get_timer)
    msg "Checking [%s] ..." "$tree"
    msg2 "local: %s" "${local_head}"
    msg2 "remote: %s" "${remote_head}"
    if [[ "${local_head}" == "${remote_head}" ]]; then
        info "nothing to do"
    else
        info "needs pull"
        git pull $git_opt origin $branch
    fi
    msg "Done [%s]" "$tree"
    show_elapsed_time "${FUNCNAME}" "${timer}"
}

clone_tree(){
    local timer=$(get_timer) tree="$1" host_tree="$2"
    msg "Preparing [%s] ..." "$tree"
    info "clone"
    git clone $host_tree/$tree.git
    msg "Done [%s]" "$tree"
    show_elapsed_time "${FUNCNAME}" "${timer}"
}

pull_tree_arch(){
    cd ${tree_dir_arch}
        for tree in packages community;do
            if [[ -d ${tree} ]];then
                cd ${tree}
                    pull_tree "${tree}"
                cd ..
            else
                clone_tree "${tree}" "${host_tree_arch}/${tree}"
            fi
        done
    cd ..
}

pull_tree_artix(){
    local tree="$1"
    cd ${tree_dir_artix}
        if [[ -d ${tree} ]];then
            cd ${tree}
                pull_tree "${tree}" "--rebase"
            cd ..
        else
            clone_tree "${tree}" "${host_tree_artix}/${tree}"
        fi
    cd ..
}

read_import_list(){
    local tree="$1"
    local _space="s| ||g" _clean=':a;N;$!ba;s/\n/ /g' _com_rm="s|#.*||g"
    import_list=$(sed "$_com_rm" "${list_dir_import}/$tree.list" | sed "$_space" | sed "$_clean")
}

patch_pkg(){
    local pkg="$1"
    case $pkg in
        'glibc')
            sed -e 's|{locale,systemd/system,tmpfiles.d}|{locale,tmpfiles.d}|' \
                -e '/nscd.service/d' \
                -i $pkg/trunk/PKGBUILD
        ;;
        'bash')
            sed -e 's|system.bash_logout)|system.bash_logout\n        artix.bashrc)|' \
                -e 's|etc/bash.|etc/bash/|g' \
                -e 's|install -dm755 "$pkgdir"/etc/skel/|install -dm755 "$pkgdir"/etc/{skel,bash/bashrc.d}/|' \
                -e 's|/etc/skel/.bash_logout|/etc/skel/.bash_logout\n  install -m644 artix.bashrc "$pkgdir"/etc/bash/bashrc.d/artix.bashrc|' \
                -i $pkg/trunk/PKGBUILD

            patch -p1 -i $DATADIR/patches/artix-bash.patch
            cd $pkg
                updpkgsums
            cd ..
        ;;
        'tp_smapi'|'acpi_call'|'r8168')
            sed -e 's|-ARCH|-ARTIX|g' -i $pkg/trunk/PKGBUILD
        ;;
    esac
}

get_import_path(){
    local tree="$1" import_path=
    case $tree in
        packages) import_path=${tree_dir_arch}/packages ;;
        packages-galaxy) import_path=${tree_dir_arch}/community ;;
    esac
    echo $import_path
}

import_from_arch(){
    local timer=$(get_timer)
    read_import_list "${git_tree}"
    if [[ -n ${import_list[@]} ]];then
        cd ${tree_dir_artix}/${git_tree}
        $(is_dirty) && die "[%s] has uncommited changes!" "${git_tree}"
        git pull --rebase origin master
        for pkg in ${import_list[@]};do
            local src=$(get_import_path "${git_tree}")
            local dest=${tree_dir_artix}/${git_tree}
            source $src/$pkg/trunk/PKGBUILD 2>/dev/null
            local ver=$(get_full_version $pkg)
            msg "Package: %s-%s" "$pkg" "$ver"
            rsync "${rsync_args[@]}"  $src/$pkg/ $dest/$pkg/
            patch_pkg "$pkg"
            unset pkgver epoch pkgrel ver
        done
    fi
    show_elapsed_time "${FUNCNAME}" "${timer}"
}

move_pkg(){
    local pkg="$1" src_repo="$2" dest_repo="$3"
    cd ${tree_dir_artix}/${git_tree}/$pkg/repos
    git mv $src_repo $dest_repo
    git add -u $dest_repo
    git commit -m "Move '$pkg' from [$src_repo] to [$dest_repo]"
}

display_settings(){
    show_version
    show_config

    msg "OPTIONS:"
    msg2 "git_tree: %s" "${git_tree}"
    msg2 "package: %s" "${package}"
    msg2 "src_repository: %s" "${src_repository}"
    msg2 "dest_repository: %s" "${dest_repository}"

    msg "ARGS:"
    msg2 "artix: %s" "${artix}"
    msg2 "arch: %s" "${arch}"
    msg2 "import_arch: %s" "${import_arch}"

    msg "PATHS:"
    msg2 "tree_dir_artix: %s" "${tree_dir_artix}"
    msg2 "tree_dir_arch: %s" "${tree_dir_arch}"
    msg2 "patches_dir: %s" "${patches_dir}/${git_tree}"
}

load_user_info

load_config "${AT_USERCONFDIR}/artools.conf" || load_config "${SYSCONFDIR}/artools.conf"

pretend=false
arch=false
artix=false
import_arch=false
create=false
move=false
git_tree='packages'
package=''
src_repository=''
dest_repository=''

rsync_args=(-aWxvci --progress --delete-before --no-R --no-implied-dirs)

usage() {
    echo "Usage: ${0##*/} [options]"
    echo "    -r <git>      Repository [default:${git_tree}]"
    echo "    -p <pkg>      Package [default:${package}]"
    echo "    -s <src>      Src repo name [default:${src_repository}]"
    echo "    -d <dest>     Dest repo name [default:${dest_repository}]"
    echo "    -a            Pull arch tree"
    echo "    -b            Pull artix tree"
    echo '    -i            Import arch packages'
    echo '    -m            Move package from src to dest repo'
    echo '    -q            Query settings'
    echo '    -h            This help'
    echo ''
    echo ''
    exit $1
}

orig_argv=("$0" "$@")

opts='r:p:s:d:abimqh'

while getopts "${opts}" arg; do
    case "${arg}" in
        r) git_tree="$OPTARG" ;;
        p) package="$OPTARG" ;;
        s) src_repository="$OPTARG" ;;
        d) dest_repository="$OPTARG" ;;
        a) arch=true ;;
        b) artix=true ;;
        i) import_arch=true ;;
        m) move=true ;;
        q) pretend=true ;;
        h|?) usage 0 ;;
        *) echo "invalid argument '${arg}'"; usage 1 ;;
    esac
done

shift $(($OPTIND - 1))

prepare_dir "${tree_dir_artix}"
prepare_dir "${tree_dir_arch}"
prepare_dir "${patches_dir}/${git_tree}"

${pretend} && display_settings && exit 1

${artix} && pull_tree_artix "${git_tree}"

${arch} && pull_tree_arch

${move} && move_pkg "${package}" "${src_repository}" "${dest_repository}"

${import_arch} && import_from_arch
