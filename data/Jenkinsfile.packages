def REPO = ''
def PACKAGE = ''
def IS_MOVE = 'false'
def IS_DELETE = 'false'
def MOVE_TO_REPO = ''
def BUILD_PATH = ''
def MOVE_PATH = ''
def DELETE_PATH = ''

pipeline {
    agent any
    options {
        skipDefaultCheckout()
        timestamps()
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm

                    def currentCommit = sh(returnStdout: true, script: 'git rev-parse @').trim()
                    echo "currentCommit: ${currentCommit}"
//                     def lastMergeCommit = sh(returnStdout: true, script: 'git log --merges --oneline --format=format:%H -n 1').trim()
//                     echo "lastMergeCommit: ${lastMergeCommit}"
//                     if ( currentCommit == lastMergeCommit ) {
//                     }
                    
                    def changedFilesStatus = sh(returnStdout: true, script: "git show --pretty=format: --name-status ${currentCommit}").tokenize('\n')
                    echo "changedFilesStatus: " + changedFilesStatus
                    
                    for (int i = 0; i < changedFilesStatus.size(); i++) {
                        def entry = changedFilesStatus[i].split()
                        def status = entry[0]
                        def filePath = entry[1]
                        echo "status: ${status} filePath: ${filePath}"
                        if ( filePath.contains('PKGBUILD') ){
                            BUILD_PATH = filePath.minus('/PKGBUILD')
                            def buildInfo = BUILD_PATH.tokenize('/')
                            PACKAGE = buildInfo[0]
                            def gitRepoNode = buildInfo[1]
                            if ( gitRepoNode == 'repos' ){
                                def gitRepo = buildInfo[2]
                                def repository = ''
                                if ( gitRepo.contains('staging') ){
                                    REPO = 'goblins'
                                    if ( status == 'D' ){
                                        IS_MOVE = 'true'
                                        MOVE_TO_REPO = 'gremlins'
                                        repository = "${PACKAGE}/${gitRepoNode}/testing-x86_64"
                                        if ( fileExists(repository) ){
                                            MOVE_PATH = repository
                                        }
                                        repository = "${PACKAGE}/${gitRepoNode}/testing-any"
                                        if ( fileExists(repository) ){
                                            MOVE_PATH = repository
                                        }
                                    }
                                } else if ( gitRepo.contains('testing') ){
                                    REPO = 'gremlins'
                                    if ( status == 'D' ){
                                        IS_MOVE = 'true'
                                        repository = "${PACKAGE}/${gitRepoNode}/core-x86_64"
                                        if ( fileExists(repository) ) {
                                            MOVE_TO_REPO = 'system'
                                            MOVE_PATH = repository
                                        } 
                                        repository = "${PACKAGE}/${gitRepoNode}/core-any"
                                        if ( fileExists(repository) ){
                                            MOVE_TO_REPO = 'system'
                                            MOVE_PATH = repository
                                        }
                                        repository = "${PACKAGE}/${gitRepoNode}/extra-x86_64"
                                        if ( fileExists(repository) ){
                                            MOVE_TO_REPO = 'world'
                                            MOVE_PATH = repository
                                        } 
                                        repository = "${PACKAGE}/${gitRepoNode}/extra-any"
                                        if ( fileExists(repository) ){
                                            MOVE_TO_REPO = 'world'
                                            MOVE_PATH = repository
                                        }
                                    }
                                } else if ( gitRepo.contains('core') ){
                                    REPO = 'system'
                                    if ( status == 'D' ){
                                        IS_DELETE = 'true'
                                    }
                                } else if ( gitRepo.contains('extra') ){
                                    REPO = 'world'
                                    if ( status == 'D' ){
                                        IS_DELETE = 'true'
                                    }
                                }
                            } else {
                                DELETE_PATH = "${PACKAGE}/${gitRepoNode}"
                            }
                        }
                    }
                    echo "PACKAGE: ${PACKAGE}"
                    echo "REPO: ${REPO}"
                    echo "IS_MOVE: ${IS_MOVE} MOVE_TO_REPO: ${MOVE_TO_REPO}"
                    echo "IS_DELETE: ${IS_DELETE} DELETE_PATH: ${DELETE_PATH}"
                }
            }
        }
        stage('Build') {
            environment {
                BUILDBOT_GPGP = credentials('BUILDBOT_GPGP')
            }
            when {
                expression { return  IS_MOVE == 'false' }
                expression { return  IS_DELETE == 'false' }
            }
            steps {
                script {
                    dir("${BUILD_PATH}") {
                        echo "buildpkg2 -r ${REPO}"
                    }
                }
            }
            post {
                success {
                    script {
                        dir("${BUILD_PATH}") {
                            echo "deploypkg2 -a -d ${REPO}"
                        }
                    }
                }
            }
        }
        stage('Move') {
            when {
                expression { return  IS_MOVE == 'true' }
                expression { return  IS_DELETE == 'false' }
            }
            steps {
                script {
                    dir("${MOVE_PATH}") {
                        echo "deploypkg2 -m -s ${REPO} -d ${MOVE_TO_REPO}"
                    }
                }
            }
        }
        stage('Delete') {
            when {
                expression { return  IS_MOVE == 'false' }
                expression { return  IS_DELETE == 'true' }
            }
            steps {
                script {
                    dir("${DELETE_PATH}") {
                        echo "deploypkg2 -r -d ${REPO}"
                    }
                }
            }
        }
    }
}
