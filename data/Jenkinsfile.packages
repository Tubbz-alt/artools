def REPO = ''
def PACKAGE = ''
def IS_MOVE = 'false'
def IS_DELETE = 'false'
def MOVE_TO_REPO = ''
def BUILD_PATH = ''
def MOVE_PATH = ''
def DELETE_PATH = ''

pipeline {
    agent any
    options {
        skipDefaultCheckout()
        timestamps()
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm

                    def currentCommit = sh(returnStdout: true, script: 'git rev-parse @').trim()
                    echo "currentCommit: ${currentCommit}"
//                     def lastMergeCommit = sh(returnStdout: true, script: 'git log --merges --oneline --format=format:%H -n 1').trim()
//                     echo "lastMergeCommit: ${lastMergeCommit}"
//                     if ( currentCommit == lastMergeCommit ) {
//                     }
                    
                    def changedFilesStatus = sh(returnStdout: true, script: "git show --pretty=format: --name-status ${currentCommit}").tokenize('\n')
                    echo "changedFilesStatus: " + changedFilesStatus
                    
                    for ( int i = 0; i < changedFilesStatus.size(); i++ ) {
                        def entry = changedFilesStatus[i].split()
                        def status = entry[0]
                        def filePath = []                        
                        for ( int j = 1; j < entry.size(); j++ ) {
                            if ( entry[j].contains('PKGBUILD') ){
                                filePath << entry[j].minus('/PKGBUILD')
                            }
                        }
                        def pathSize = filePath.size()
                        if ( pathSize > 0 ){
                            IS_MOVE = 'true'
                            if ( filePath[0].contains('staging') ) {
                                MOVE_PATH = filePath[1]
                                REPO = 'goblins'
                                MOVE_TO_REPO = 'gremlins'
                            } else if ( filePath[0].contains('testing') ) {
                                MOVE_PATH = filePath[1]
                                if ( MOVE_PATH.contains('staging') ) {
                                    REPO = 'gremlins'
                                    MOVE_TO_REPO = 'goblins'
                                } else if ( MOVE_PATH.contains('core') ) {
                                    REPO = 'gremlins'
                                    MOVE_TO_REPO = 'system'
                                } else if ( MOVE_PATH.contains('extra') ) {
                                    REPO = 'gremlins'
                                    MOVE_TO_REPO = 'world'
                                }
                            }
                        } else {
                            BUILD_PATH = filePath[0]
                            def buildInfo = BUILD_PATH.tokenize('/')
                            def repoNode = buildInfo[1]
                            REPO = buildInfo[2]
                            PACKAGE = buildInfo[0]
                            
                            if ( status.contains('D') ) {
                                IS_DELETE = 'true'
                                DELETE_PATH = "${PACKAGE}/trunk"
                            }
                        }
                    }
                    echo "REPO: ${REPO} PACKAGE: ${PACKAGE} BUILD_PATH: ${BUILD_PATH}"
                    echo "IS_MOVE: ${IS_MOVE} MOVE_TO_REPO: ${MOVE_TO_REPO} MOVE_PATH: ${MOVE_PATH}"
                    echo "IS_DELETE: ${IS_DELETE} DELETE_PATH: ${DELETE_PATH}"
                }
            }
        }
        stage('Build') {
            environment {
                BUILDBOT_GPGP = credentials('BUILDBOT_GPGP')
            }
            when {
                expression { return  IS_MOVE == 'false' }
                expression { return  IS_DELETE == 'false' }
            }
            steps {
                script {
                    dir("${BUILD_PATH}") {
                        if ( PACKAGE != '' ) {
                            echo "buildpkg2 -r ${REPO}"
                        }
                    }
                }
            }
            post {
                success {
                    script {
                        dir("${BUILD_PATH}") {
                            if ( PACKAGE != '' ) {
                                echo "deploypkg2 -a -d ${REPO}"
                            }
                        }
                    }
                }
            }
        }
        stage('Move') {
            when {
                expression { return  IS_MOVE == 'true' }
                expression { return  IS_DELETE == 'false' }
            }
            steps {
                script {
                    dir("${MOVE_PATH}") {
                        echo "deploypkg2 -m -s ${REPO} -d ${MOVE_TO_REPO}"
                    }
                }
            }
        }
        stage('Delete') {
            when {
                expression { return  IS_MOVE == 'false' }
                expression { return  IS_DELETE == 'true' }
            }
            steps {
                script {
                    dir("${DELETE_PATH}") {
                        echo "deploypkg2 -r -d ${REPO}"
                    }
                }
            }
        }
    }
}
